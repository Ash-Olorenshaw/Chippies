#!/usr/bin/python3
# -*- coding: utf-8 -*-

from platform import system
from os import listdir
from os.path import isdir, isfile, join
from pathlib import Path
from configparser import ConfigParser
import tkinter as tk
import subprocess

user_terminal = "konsole"

class App(tk.Tk):
    entry = None
    text = None

    def __init__(self):
        tk.Tk.__init__(self)
        
        self.geometry("400x50+500+300")
        self.attributes("-topmost", True)

        if system() == "Linux":
            self.attributes("-type", "notification")
        else:
            self.overrideredirect(True)

        self.configure(bg = "#222222")
        self.focus_force()
        self.lift()
        self.update()

        self.text = tk.StringVar()
        self.entry = tk.Entry(self, textvariable = self.text)

        self.entry.pack(fill = tk.BOTH, expand = True, padx = 10, pady = 10)
        self.entry.bind("<Return>", self.on_save)
        self.entry.bind("<Escape>", self.close)
        self.entry.focus()

        self.mainloop()

    def on_save(self, event):
        command = self.text.get().strip()
        if command:
            match system():
                case "Darwin":
                    usr_app = self.fuzzy_search("Darwin", "/Applications/", command)
                    subprocess.Popen(["open", "-a", f"/Applications/{usr_app}"], stderr = subprocess.DEVNULL)
                case "Linux":
                    usr_app = self.fuzzy_search("Linux", "/usr/share/applications", command)
                    if usr_app:
                        try:
                            subprocess.Popen(usr_app, stderr = subprocess.DEVNULL)
                        except Exception as e:
                            print(e)
                            home_app = self.fuzzy_search("Linux", f"{Path.home()}/.local/share/Applications", command)
                            if home_app:
                                try:
                                    subprocess.Popen(home_app, stderr = subprocess.DEVNULL)
                                except Exception as e:
                                    print(e)
                                    try:
                                        subprocess.Popen(["./linux-run.sh", command, user_terminal], stderr = subprocess.DEVNULL)
                                    except Exception as e:
                                        print(f"Failed to find application or command '{command}'")
                                        print(e)
                case "Windows":
                    subprocess.Popen(f"cd %HOMEDRIVE%%HOMEPATH% && if \"{command}\"==\"\" (cmd) else (start \"\" \"{command}\" || cmd /k \"{command}\")", shell = True, stderr = subprocess.DEVNULL)
        self.clear()
        self.close(None)

    def fuzzy_search(self, current_os : str, directory, target_name):
        for file in listdir(directory):
            full_file = join(directory, file)
            if (current_os == "Linux" and isfile(full_file)) or (current_os == "Darwin" and isdir(full_file)):
                if target_name.lower() in str(file).lower():
                    data = ConfigParser(interpolation = None)
                    data.read(full_file)
                    if current_os == "Linux" and "Desktop Entry" in data:
                        desktop_entry = data["Desktop Entry"]
                        if "Exec" in desktop_entry:
                            exec = desktop_entry["Exec"] 
                            new_elems = []
                            for arg in exec.split(' '): 
                                if arg[0] != '%':
                                    new_elems.append(arg)
                            return ' '.join(new_elems)
                    elif current_os == "Darwin":
                        return full_file
        return ""

    def clear(self):
        self.text.set("")

    def close(self, event):
        if self.text.get():
            self.clear()
        else:
            self.destroy()

App()

